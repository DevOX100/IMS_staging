name: CI for .NET Framework 4.8

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.0.3

    - name: Setup NuGet
      uses: nuget/setup-nuget@v1.0.6

    - name: Restore NuGet packages
      run: nuget restore ./IMS_staging.sln

    - name: Build Solution
      run: msbuild ./IMS_staging.sln /p:Configuration=Release /p:TargetFrameworkVersion=v4.8

    - name: List files in root directory (for debugging)
      run: dir ${{ github.workspace }}

    - name: List files in bin directory (for debugging)
      run: dir ${{ github.workspace }}/bin

    - name: Create Artifact ZIP
      run: Compress-Archive -Path ${{ github.workspace }}/bin/* -DestinationPath ./build-artifacts.zip

    - name: Upload Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: ./build-artifacts.zip

    # Install Pritunl Client using Chocolatey and set up VPN
    # - name: Install Pritunl Client
    #   run: |
    #     choco install pritunl-client --version=1.3.4066.5100 -y

    # - name: Set up VPN with Pritunl
    #   uses: nathanielvarona/pritunl-client-github-action@v1.6.8
    #   with:
    #     profile-file: ${{ secrets.PRITUNL_PROFILE }}  Base64 encoded .ovpn profile file from GitHub Secrets
    #     vpn-mode: ovpn  Use OpenVPN mode, change to 'wg' for WireGuard if needed
    #     start-connection: true  Automatically start the VPN connection
    #     ready-profile-timeout: 10  Timeout for the profile readiness (seconds)
    #     established-connection-timeout: 60  Timeout for the connection establishment (seconds)
    #     concealed-outputs: true  Conceal the profile outputs for security

    # - name: Setup SSH
    #   uses: webfactory/ssh-agent@v0.5.3
    #   with:
    #     ssh-private-key: ${{ secrets.IMSKEY }}  Your SSH private key in GitHub Secrets

    # - name: Deploy to IIS Server
    #   run: |
    #     Ensure the destination folder on the server exists (optional)
    #     ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_IP }} "mkdir -p C:/inetpub/wwwroot/IMS_staging"

    #     Copy the build artifacts to the IIS server
    #     scp -r ./build-artifacts.zip ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_IP }}:/C:/inetpub/wwwroot/IMS_staging/

    #     Unzip the build artifacts on the IIS server
    #     ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_IP }} "powershell -Command Expand-Archive -Path 'C:/inetpub/wwwroot/IMS_staging/build-artifacts.zip' -DestinationPath 'C:/inetpub/wwwroot/IMS_staging/'"

    #     Optionally, restart IIS application pool to refresh the deployment
    #     ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_IP }} "iisreset"
